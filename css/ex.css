@import "variabless.css";을 통해 #login-form input 의 border-color 를 var(--yellow)로 바꿔주고,
transition: border-color 를 통해 borderColor의 색이 바뀌는 과정을 애니메이션으로 변환해줌
 > transition: border-color 0.3s ease-in-out;        (0.3c초 동안, ease-in-out 으로;)

이 때 transition을 #login-form input::placeholder{ }에 해주지 않고 #login-form{ }에 해 준 이유는?
 > #login-form input:focus{ } 때문에 placeholder 들은 PsuedoSelector 가 있음. But transition은
 psuedoSelector가 없는 곳에 위치해야 함. So. placeholder 의 부모 격인 #login-form 에 위치.

#login-form input:focus {border-color: var(--yellow);} 때문에 LogIn 버튼 아래에도 borderColor가 생김 없애주는 방법으로 여러 가지가 있지만, input:not()
을 이용해보자.
#login-form input {} 의 내용들 중 필요한 내용을 빼서 #login-form input:not([type="submit"]) { } 안으로 위치를 변경해주면 됨.
 > input:not([type="submit"]) = input 타입이 submit 이 아닐 때.
 > input:not([A]) . A = attribute selector 

form 이란 건 2가지 속성을 가지고 있음. 
    1. action => 어떤 페이지로 data 를 보낼건지 지정할 수 있음. 
        Ex) <form action="A"

    2. method => 2가지 방식 중 하나를 쓸 수 있음.
        (1) POST = 백엔드 서버에 정보를 전송하는 방식.
        (2) GET  = GET은 보안에 취약함. 따라서 username, password 같은 것은 절대로 GET 방식으로 보내면 안됨. URL에 포함되어도 상관없는 정보들을 보내야 함.
            Ex) https://www.google.com/search?q=potato 을 보면 query=potato 라고 되어있음. 이것을 q=seoul 로 바꿔서 주소창에 입력하면
             마치 내가 구글 검색창에 seoul 이라고 입력한 것 처럼 됨. 이와 마찬가지. 만약 ID, PW 같은 것들을 GET 방식으로 전송하게 되면
             URL 뒤편에 username=A password=B 와도 같이 개인 정보들이 표기될 수 있음을 인지해야 함.
             
      /* POST 와 GET 에 대해서 조금 더 알아보기. */

    <nav>
      <ul>
        <li>
            <a href=""></a>
        </li>
      </ul>
    </nav>                                             만들 때 꿀팁.

하나하나 하려고 하지말고 ShortCut 이용하기.

    nav>ul>li*4>a